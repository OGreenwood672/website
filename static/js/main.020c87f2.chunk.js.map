{"version":3,"sources":["password_checker.js","noughts_and_crosses.js","sudoku.js","maze_generator.js","snake.js","conways.js","maze_solver.js","chess.js","index.js"],"names":["TextInput","props","value","onChange","evt","PasswordChecker","state","inputValue","color","endText","sum","string","this","test","setState","length","target","updateColor","className","updateInputValue","style","React","Component","Ai","squares","bestMove","newScore","bestScore","Infinity","i","subMinimax","console","log","minimax","depth","points","winner","calculateWinner","includes","Math","max","min","Square","onClick","Board","Array","fill","slice","aiMove","mainMinimax","handleClick","status","renderSquare","id","reset","lines","a","b","c","Game","Solver","board","row","rowItems","column","columnItems","r","box","boxCount","x","y","originalI","originalJ","numbers","Set","taken","j","add","iBox","jBox","num","from","setA","setB","_difference","elem","delete","difference","avaliable","findAvaliable","updateIJ","newI","newJ","solve","Sudoku","push","option","newBoard","opt","updateValue","ai","CheckIfPossible","rows","renderRow","options","WidthInput","borderline","backgroundColor","width","w","height","borderTop","walls","borderRight","borderBottom","borderLeft","Cell","visited","grid","neighbours","top","right","bottom","left","removeWalls","MazeGen","maze","boardLength","stack","end","current","pop","getNeighbours","neighbour","floor","random","info","renderGrid","updateBoard","create","snake","fruit","Fruit","size","newCoords","coords","allowed","checkAllowed","element","_","JSON","stringify","window","memory","every","Snake","score","round","move","direction","newCoord","unshift","Score","gameBoard","tickTime","fnInterval","setInterval","gameTick","movement","checkCollision","head","exited","hitSelf","body","clearInterval","renderBoard","renderedBoard","UserInput","e","keyCode","addEventListener","keyHandling","removeEventListener","alive","position","Go","Stop","Conways","change","indiv","GetNeighbours","future","changeState","begin","heuristic","pow","type","previous","undefined","f","g","h","MazeSolver","tool","openSet","closedSet","astar","astarSetUp","cell","path","arr","item","splice","removeFromArr","tentative_g","openSetType","closedSetType","removeAll","draw","playing","miniAlphaBeta","alpha","beta","scoreBoard","boards","generateBoards","whitePieces","boardIndexWinner","lowestScore","maxAlphaBeta","blackPieces","highestScore","Piece","isWhite","label","piecePic","toLowerCase","landedOn","getPieceAt","step_x","step_y","abs","check_x","check_y","moves","GetMoves","duplicate","King","positioning","reverse","hasLandedOnTeam","possibleMoves","new_x","new_y","validXY","clone","Queen","bishop","rook","movesThroughPieces","Knight","opt1","opt2","Rook","Bishop","Pawn","unmoved","scorer","white","piece","black","pieces","concat","landingOn","colorPieces","piecesNewBoards","BoardGen","gameOver","setUp","bind","moveIsPossible","forceUpdate","checkmate","src","alt","user","url","NavButton","Navbar","message","location","href","renderButton","ProjectNav","origin","About","Home","Website","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.020c87f2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css'\r\n/*\r\nclass TextInput extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input value={this.props.value} onChange={evt => this.props.updateInputValue(evt)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n*/\r\n\r\nfunction TextInput(props) {\r\n    return (\r\n        <div>\r\n            <input value={props.value} onChange={evt => props.onChange(evt)}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass PasswordChecker extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            inputValue: \"\",\r\n            color: \"red\",\r\n            endText: \"INVALID\"\r\n        };\r\n    }\r\n\r\n    updateColor() {\r\n        var sum = 0\r\n        const whiteSpace = /\\s/;\r\n        const upper = /[A-Z]+/;\r\n        const lower = /[a-z]+/;\r\n        const digits = /\\d+/;\r\n        const string = this.state.inputValue;\r\n        if (!whiteSpace.test(string)) {\r\n            this.setState({endText: \"STRENGTH\"});\r\n            if (upper.test(string)) { sum+=5; }\r\n            if (lower.test(string)) { sum+=5; }\r\n            if (digits.test(string)) { sum+=5; }\r\n            if (string.length < 8) {\r\n                sum -= 15;\r\n            } else if (sum >= 10) {\r\n                sum += string.length;\r\n            }\r\n\r\n            if (sum > 20) {\r\n                return \"green\";\r\n            } else if (sum > 12) {\r\n                return \"orange\";\r\n            } else {\r\n                return \"red\";\r\n            }\r\n        }\r\n        this.setState({endText: \"INVALID\"});\r\n        return \"red\";\r\n    }\r\n\r\n    updateInputValue(evt) {\r\n        this.setState({\r\n            inputValue: evt.target.value\r\n        });\r\n        this.setState({color: this.updateColor()});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"center mainBox\">\r\n                <p className=\"instructions\">Password: </p>\r\n                <TextInput value={this.state.inputValue} onChange={(evt) => this.updateInputValue(evt)}/>\r\n                <p className=\"instructions\" style={{color: this.state.color}}>****STRENGTH****</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PasswordChecker;","import React from 'react';\r\nimport './noughts_and_crosses.css';\r\n\r\nclass Ai {\r\n\r\n  static mainMinimax(squares) {\r\n    let bestScore = -Infinity;\r\n    let bestMove;\r\n    let newScore;\r\n    for (let i = 0; i < squares.length; i++) {\r\n      if (squares[i] === null) {\r\n        squares[i] = 'O';\r\n        newScore = this.subMinimax(squares, false, 1);\r\n        squares[i] = null;\r\n        console.log(newScore);\r\n        if (newScore > bestScore) {\r\n          bestScore = newScore;\r\n          bestMove = i;\r\n        }\r\n      }\r\n    }\r\n    return bestMove;\r\n\r\n  }\r\n\r\n  static subMinimax(squares, minimax, depth) {\r\n\r\n    let bestScore;\r\n    let newScore;\r\n\r\n    const points = {'X': -900, 'O': 1000};\r\n    let winner = calculateWinner(squares);\r\n\r\n    if (winner in points) {\r\n      return points[winner];\r\n    } else if (!squares.includes(null)) {\r\n      return 1;\r\n    }\r\n\r\n    if (minimax) {\r\n      bestScore = -Infinity\r\n      for (let i = 0; i < squares.length; i++) {\r\n        if (squares[i] === null) {\r\n          squares[i] = 'O';\r\n          newScore = this.subMinimax(squares, !minimax, depth+1) - depth;\r\n          squares[i] = null;\r\n          bestScore = Math.max(newScore, bestScore)\r\n        }\r\n      }\r\n    } else {\r\n      bestScore = Infinity\r\n      for (let i = 0; i < squares.length; i++) {\r\n        if (squares[i] === null) {\r\n          squares[i] = 'X';\r\n          newScore = this.subMinimax(squares, !minimax, depth+1) - depth;\r\n          squares[i] = null;\r\n          bestScore = Math.min(newScore, bestScore)\r\n        }\r\n      }\r\n    }\r\n    //console.log(bestScore)\r\n    return bestScore;\r\n  }\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" \r\n              onClick={() => {props.onClick()}}\r\n            >\r\n        {props.value}\r\n      </button>\r\n  )\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      squares: Array(9).fill(null),\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const squares = this.state.squares.slice();\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    squares[i] = 'X';\r\n\r\n    if (!calculateWinner(squares)) {\r\n      let aiMove = Ai.mainMinimax(squares);\r\n      console.log(aiMove)\r\n      squares[aiMove] = 'O';\r\n    }\r\n\r\n    this.setState({squares: squares});\r\n  }\r\n\r\n  reset() {\r\n    this.setState({squares: Array(9).fill(null)});\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return <Square \r\n            value={this.state.squares[i]}\r\n            onClick={() => this.handleClick(i)}\r\n            />\r\n  }\r\n\r\n  render() {\r\n    const winner = calculateWinner(this.state.squares);\r\n    let status;\r\n    if (winner) {\r\n      status = 'Winner: ' + winner;\r\n    } else {\r\n      status = \"You are: 'X'\";\r\n    }\r\n\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n        <div className=\"status\">{status}</div>\r\n        <button id=\"reset\" onClick={() => this.reset()}>Reset</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"game-board\">\r\n        <Board />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction calculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n// ========================================\r\n\r\nexport default Game\r\n","import React from 'react';\r\nimport './sudoku.css'\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button className=\"squareSudoku\" onClick={(evt) => {props.onClick(evt)}}>{props.value}</button>\r\n      )\r\n}\r\n\r\nfunction difference(setA, setB) {\r\n    let _difference = new Set(setA)\r\n    for (let elem of setB) {\r\n        _difference.delete(elem)\r\n    }\r\n    return _difference\r\n}\r\n\r\nclass Solver {\r\n    constructor(board) {\r\n        this.board = board;\r\n    }\r\n\r\n    CheckIfPossible() {\r\n        for (let i = 1; i < 10; i++) {\r\n            for (let row = 0; row < 9; row++) {\r\n                let rowItems = 0;\r\n                for (let item of this.board[row]) {\r\n                    if (item === i) {\r\n                        rowItems++;\r\n                    }\r\n                }\r\n                if (rowItems > 1) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            for (let column = 0; column < 9; column++) {\r\n                let columnItems = 0;\r\n                for (let r = 0; r < 9; r++) {\r\n                    if (this.board[r][column] === i) {\r\n                        columnItems++\r\n                    }\r\n                }\r\n                if (columnItems > 1) {\r\n                    return false\r\n                }\r\n            }\r\n            const boxes = [[0, 0], [0, 3], [3, 0], [3, 3], [6, 0], [0, 6], [6, 3], [3, 6], [6, 6]];\r\n            for (let box of boxes) {\r\n                let boxCount = 0;\r\n                for (let x = 0; x < 3; x++) {\r\n                    for (let y = 0; y < 3; y++) {\r\n                        if (this.board[box[0]+x][box[1]+y] === i) {\r\n                            boxCount++;\r\n                        }\r\n                    }\r\n                }\r\n                if (boxCount > 1) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        console.log(\"Solvable\")\r\n        return true;\r\n    }\r\n    \r\n    findAvaliable(originalI, originalJ) {\r\n        var numbers = new Set([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\n        var taken = new Set();\r\n        //Row\r\n        for (let j = 0; j < 8; j++) {\r\n            if (this.board[originalI][j]) {\r\n                taken.add(this.board[originalI][j]);\r\n            }\r\n        }\r\n        //Column\r\n        for (let i = 0; i < 8; i++) {\r\n            if (this.board[i][originalJ]) {\r\n                taken.add(this.board[i][originalJ]);\r\n            }\r\n        }\r\n\r\n        //Get top left box coords\r\n        const boxes = [[0, 1, 2],[3, 4, 5], [6, 7, 8]];\r\n        let iBox, jBox, box;\r\n        for (box of boxes) {\r\n            if (box.includes(originalI)) {\r\n                iBox = box[0];\r\n            }\r\n            if (box.includes(originalJ)) {\r\n                jBox = box[0];\r\n            }\r\n        }\r\n\r\n        //Box\r\n        for (let i = 0; i < 3; i++) {\r\n            for(let j = 0; j < 3; j++) {\r\n                const num = this.board[iBox+i][jBox+j];\r\n                if (num) {\r\n                    taken.add(num);\r\n                }\r\n            }\r\n        }\r\n\r\n        return Array.from(difference(numbers, taken));\r\n       \r\n    }\r\n\r\n    updateIJ(i, j) {\r\n        j++;\r\n        if (j > 8) {\r\n            j = 0;\r\n            i++;\r\n        }\r\n        return [i, j];\r\n    }\r\n\r\n    solve(i, j) {\r\n        if (i > 8) {\r\n            return true;\r\n        }\r\n\r\n        if (!this.board[i][j]) {\r\n            const avaliable = this.findAvaliable(i, j)\r\n\r\n            let num;\r\n            for (num of avaliable) {\r\n                this.board[i][j] = num;\r\n                let [newI, newJ] = this.updateIJ(i, j);\r\n                if (this.solve(newI, newJ)) {\r\n                    return true;\r\n                }\r\n            }\r\n            this.board[i][j] = null;\r\n            return false;\r\n        }\r\n\r\n        let [newI, newJ] = this.updateIJ(i, j);\r\n        if (this.solve(newI, newJ)) {\r\n            return true;\r\n        }\r\n        return false\r\n    }\r\n}\r\n\r\nclass Sudoku extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const board = [];\r\n        for (let i=0; i<9; i++) {\r\n            board.push(new Array(9).fill(null));\r\n        }\r\n        this.state = {\r\n            board: board,\r\n            option: \"delete\"\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        var newBoard = [];\r\n        for (let i=0; i<9; i++) {\r\n            newBoard.push(new Array(9).fill(null));\r\n        }\r\n        this.setState({\r\n            board: newBoard\r\n        });\r\n    }\r\n\r\n    updateValue(i, j) {\r\n        var newBoard = this.state.board.slice();\r\n        const opt = this.state.option\r\n        if (opt !== \"delete\") {\r\n            newBoard[i][j] = this.state.option;\r\n        } else {\r\n            newBoard[i][j] = null;\r\n        }\r\n        this.setState({\r\n            board: newBoard,\r\n        });\r\n    }\r\n\r\n    renderRow(i) {\r\n        let row = []\r\n        for (let j=0; j<9; j++) {\r\n            row.push(<Square value={this.state.board[i][j]} onClick={() => this.updateValue(i, j)}/>)\r\n        }\r\n        return row\r\n    }\r\n\r\n    solve() {\r\n        const ai = new Solver(this.state.board);\r\n        if (ai.CheckIfPossible()) {\r\n            ai.solve(0, 0);\r\n            this.setState({board: ai.board});\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        var rows = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            rows.push(<div className=\"board-row-sudoku\">{this.renderRow(i)}</div>)            \r\n        }\r\n\r\n        var options = []\r\n        for (let i = 1; i < 10; i++) {\r\n            options.push(<div className=\"board-row-sudoku\"><button className=\"squareSudoku\" onClick={() => this.setState({option: i})}>{i}</button></div>)\r\n        }\r\n        options.push(<div className=\"board-row-sudoku\"><button id=\"delete\" onClick={() => this.setState({option: \"delete\"})}>Delete</button></div>)\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"options\">\r\n                    {options}\r\n                </div>\r\n                <div className=\"sudokuBoard\">\r\n                    {rows}\r\n                    <button className=\"btn\" id=\"resetSudoku\" onClick={() => this.reset()}>Reset</button>\r\n                    <button className=\"btn\" id=\"solve\" onClick={() => this.solve()}>Solve</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Sudoku;","import React from 'react';\r\nimport './maze_generator.css';\r\n\r\nfunction WidthInput(props) {\r\n    return <input  onChange={evt => props.onChange(evt)} />\r\n}\r\n\r\nfunction Square(props) {\r\n\r\n    function borderline(b) {\r\n        if (b) {\r\n            return \"black\";\r\n        } else { return \"white\" }\r\n    }\r\n\r\n    return (\r\n        <div className=\"mazeSquare\"\r\n        style={{\r\n            backgroundColor: props.value.color,\r\n            width: 500 / props.value.w,\r\n            height: 500 / props.value.w,\r\n            borderTop: \"1px solid \" + borderline(props.value.walls[0]),\r\n            borderRight: \"1px solid \" + borderline(props.value.walls[1]),\r\n            borderBottom: \"1px solid \" + borderline(props.value.walls[2]),\r\n            borderLeft: \"1px solid \" + borderline(props.value.walls[3]),\r\n        }} />\r\n    )\r\n}\r\n\r\nclass Cell {\r\n    constructor(i, j, w) {\r\n        this.walls = [true, true, true, true];\r\n        this.visited = false;\r\n        this.i = i;\r\n        this.j = j;\r\n        this.w = w;\r\n        this.color = \"#000\";\r\n\r\n    }\r\n\r\n    getNeighbours(grid) {\r\n        let neighbours = []\r\n\r\n        if (0 <= this.i-1 && this.i-1 < this.w) {\r\n            const top = grid[this.i-1][this.j]\r\n            if (!top.visited) {\r\n                neighbours.push(top)\r\n            }\r\n        }\r\n\r\n        if (0 <= this.j+1 && this.j+1 < this.w) {\r\n            const right = grid[this.i][this.j+1]\r\n            if (!right.visited) {\r\n                neighbours.push(right)\r\n            }\r\n        }\r\n\r\n        if (0 <= this.i+1 && this.i+1 < this.w) {\r\n            const bottom = grid[this.i+1][this.j]\r\n            if (!bottom.visited) {\r\n                neighbours.push(bottom)\r\n            }\r\n        }\r\n\r\n        if (0 <= this.j-1 && this.j-1 < this.w) {\r\n            const left = grid[this.i][this.j-1]\r\n            if (!left.visited) {\r\n                neighbours.push(left)\r\n            }\r\n        }\r\n\r\n        \r\n        this.neighbours = neighbours\r\n    }\r\n}\r\n\r\nfunction removeWalls(a, b) {\r\n    const x = a.j - b.j;\r\n    const y = a.i - b.i;\r\n    if (y === 1) {\r\n        a.walls[3] = false;\r\n        b.walls[1] = false;\r\n    }\r\n    if (y === -1) {\r\n        a.walls[1] = false;\r\n        b.walls[3] = false;\r\n    }\r\n\r\n    if (x === 1) {\r\n        a.walls[0] = false;\r\n        b.walls[2] = false;\r\n    }\r\n    if (x === -1) {\r\n        a.walls[2] = false;\r\n        b.walls[0] = false;\r\n    }\r\n\r\n}\r\n\r\nclass MazeGen extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const boardLength = 10\r\n        this.state = {\r\n            maze: this.reset(boardLength),\r\n            boardLength: boardLength\r\n        }\r\n    }\r\n\r\n    create(maze) {\r\n        if (maze[0][0].visited) {\r\n            return;\r\n        }\r\n\r\n        const visitColor = \"#fff\"\r\n\r\n        maze[0][0].visited = true;\r\n        maze[0][0].color = visitColor\r\n        let stack = [maze[0][0]];\r\n        let end = [0, null];\r\n\r\n        while (stack.length > 0) {\r\n            \r\n            let current = stack.pop();\r\n            current.getNeighbours(maze);\r\n\r\n            if (stack.length > end[0]) {\r\n                end = [stack.length, current];\r\n            }\r\n\r\n            if (current.neighbours.length !== 0) {\r\n                stack.push(current);\r\n                let neighbour = current.neighbours[Math.floor(Math.random() * current.neighbours.length)];\r\n                removeWalls(current, neighbour);\r\n                neighbour.visited = true;\r\n                neighbour.color = visitColor;\r\n                stack.push(neighbour);\r\n            }\r\n\r\n        }\r\n\r\n        maze[0][0].color = \"red\"\r\n        end[1].color = \"red\"\r\n        console.log(\"Created\")\r\n        this.setState({\r\n            maze: maze\r\n        });\r\n    }\r\n\r\n    updateBoard(evt) {\r\n        const digit = /\\d+/;\r\n        if (digit.test(evt.target.value)) {\r\n            if (evt.target.value <= 100) {\r\n                this.setState({\r\n                    boardLength: evt.target.value,\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    reset(length) {\r\n        let maze = [];\r\n        for (let i = 0; i < length; i++) {\r\n            let row = [];\r\n            for (let j=0; j < length; j++) {\r\n                row.push(new Cell(i, j, length))\r\n            }\r\n            maze.push(row)\r\n        }\r\n\r\n        this.setState({\r\n            maze: maze\r\n        });\r\n\r\n        return maze;\r\n    }\r\n\r\n    renderGrid() {\r\n        let grid = [];\r\n        for (let i = 0; i < this.state.maze.length; i++) {\r\n            let row = []\r\n            for (let j = 0; j < this.state.maze.length; j++) {\r\n                let info = {walls: this.state.maze[i][j].walls, w: this.state.maze[i][j].w, color: this.state.maze[i][j].color}\r\n                row.push(<Square value={info}/>)\r\n            }\r\n            grid.push(<div className=\"board-row\">{row}</div>)\r\n        }\r\n        return grid\r\n    }\r\n\r\n    render() {\r\n\r\n        let grid = this.renderGrid();\r\n\r\n        return (\r\n            <div>\r\n                <div className=\"wInput\">\r\n                    <WidthInput onChange={evt => this.updateBoard(evt)}/>\r\n                </div>\r\n                <div className=\"board\">\r\n                    {grid}\r\n                    <button onClick={() => this.create(this.state.maze.slice())}>Create</button>\r\n                    <button onClick={() => this.reset(this.state.boardLength)}>Reset</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MazeGen;","import React from 'react';\r\nimport './snake.css'\r\n\r\n\r\nclass Cell {\r\n    constructor(i, j) {\r\n        this.i = i;\r\n        this.j = j;\r\n        this.snake = false;\r\n        this.fruit = false;\r\n    }\r\n}\r\n\r\nclass Fruit {\r\n    constructor(size) {\r\n        this.size = size\r\n        this.newCoords();\r\n    }\r\n\r\n    newCoords() {\r\n        let allowed = false;\r\n        let coords;\r\n\r\n        function checkAllowed(element, _) {\r\n            if (JSON.stringify(element) !== JSON.stringify(coords)) {\r\n                return true;\r\n            }\r\n            return false;\r\n        }\r\n\r\n        while (!allowed) {\r\n            coords = [Math.floor(Math.random() * this.size[0]), Math.floor(Math.random() * this.size[1])];\r\n            allowed = window.snake.memory.every(checkAllowed)\r\n        }\r\n        this.coords = coords;\r\n    }\r\n}\r\n\r\nclass Snake {\r\n    constructor(size) {\r\n        this.score = 0;\r\n        this.memory = [[Math.round(size[0]/2), Math.round(size[1]/2)]]\r\n        this.move = {'up': [0, -1], 'right':[1, 0], 'down':[0, 1], 'left':[-1, 0]}\r\n        this.direction = 'up'\r\n    }\r\n\r\n    movement() {\r\n        const new_x = this.memory[0][0] + this.move[this.direction][0];\r\n        const new_y = this.memory[0][1] + this.move[this.direction][1];\r\n        const newCoord = [new_x, new_y];\r\n        this.memory.unshift(newCoord)\r\n        while (this.score < this.memory.length - 1) {\r\n            this.memory.pop()\r\n        }\r\n    }\r\n}\r\n\r\nfunction Score(props) {\r\n    return (\r\n        <h1 className=\"score\">Score: {props.value}</h1>\r\n    )\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.size = [40, 25];\r\n        const gameBoard = this.newBoard();\r\n        window.snake = new Snake(this.size);\r\n        this.fruit = new Fruit(this.size)\r\n        this.state = {\r\n            gameBoard: gameBoard,\r\n            tickTime: 300,\r\n        }\r\n        window.fnInterval = setInterval(() => { this.gameTick(); }, this.state.tickTime);\r\n    }\r\n\r\n    gameTick() {\r\n        window.snake.movement();\r\n        this.checkCollision();\r\n        this.updateBoard();\r\n    }\r\n\r\n    checkCollision() {\r\n        const head = window.snake.memory[0]\r\n        if (JSON.stringify(this.fruit.coords) === JSON.stringify(head)) {\r\n            this.fruit.newCoords();\r\n            window.snake.score++;\r\n        }\r\n\r\n        const exited = (0 > head[0] || this.size[0] < head[0] || 0 > head[1] || this.size[1] < head[1])\r\n\r\n        let hitSelf = false;\r\n        for (let body of window.snake.memory.slice(1, )) {\r\n            if (JSON.stringify(head) === JSON.stringify(body)) {\r\n                hitSelf = true;\r\n            }\r\n        }\r\n        if (exited || hitSelf) {\r\n            window.fnInterval = clearInterval(window.fnInterval)\r\n            console.log(\"Game Over\")\r\n        }\r\n    }\r\n\r\n    updateBoard() {\r\n\r\n        let board = this.newBoard()\r\n\r\n        for (let snake of window.snake.memory) {\r\n            try {\r\n                board[snake[0]][snake[1]].snake = true;\r\n            } catch {\r\n                console.log(\"dead\")\r\n            }\r\n\r\n        }\r\n\r\n        board[this.fruit.coords[0]][this.fruit.coords[1]].fruit = true;\r\n                \r\n\r\n        this.setState({\r\n            gameBoard: board,\r\n        });\r\n    }\r\n\r\n    newBoard() {\r\n        let board = [];\r\n        for (let i = 0; i < this.size[0]; i++) {\r\n            let row = []\r\n            for (let j = 0; j < this.size[1]; j++) {\r\n                row.push(new Cell(i, j))\r\n            }\r\n            board.push(row);\r\n        }\r\n        return board\r\n    }\r\n\r\n    renderBoard() {\r\n        let renderBoard = [];\r\n        for (let i = 0; i < this.size[0]; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.size[1]; j++) {\r\n                let color;\r\n                if (this.state.gameBoard[i][j].snake) {\r\n                    color = '#fff';\r\n                } else if (this.state.gameBoard[i][j].fruit) {\r\n                    color = \"red\"\r\n                } else {\r\n                    color = '#000'\r\n                }\r\n                row.push(<div className=\"boardSegment\" style={{backgroundColor: color}} />)\r\n            }\r\n            renderBoard.push(<div className=\"board-row\">{row}</div>)\r\n        }\r\n\r\n        return renderBoard;\r\n    }\r\n\r\n    render() {\r\n        var renderedBoard = this.renderBoard()\r\n        return (\r\n            <div className=\"board\">\r\n                {renderedBoard}\r\n                <Score value={window.snake.score} />\r\n                <UserInput />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass UserInput extends React.Component {\r\n    render() {\r\n        return (\r\n            <div />\r\n        )\r\n    }  \r\n\r\n    keyHandling(e) {\r\n        switch (e.keyCode) {\r\n        case 37:\r\n            if (!(window.snake.direction === 'right')) {\r\n                window.snake.direction = 'left';\r\n            }\r\n            break;\r\n        case 38:\r\n            if (!(window.snake.direction === 'down')) {\r\n                window.snake.direction = 'up';\r\n            }\r\n            break;\r\n        case 39:\r\n            if (!(window.snake.direction === 'left')) {\r\n                window.snake.direction = 'right';\r\n            }\r\n            break;\r\n        case 40:\r\n            if (!(window.snake.direction === 'up')) {\r\n                window.snake.direction = 'down';\r\n            }\r\n            break;\r\n        default: \r\n            break;\r\n        }\r\n    }\r\n      \r\n    componentDidMount() {\r\n        // Add Event Listener on compenent mount\r\n        window.addEventListener(\"keyup\", this.keyHandling);\r\n    }\r\n      \r\n    componentWillUnmount() {\r\n        // Remove event listener on compenent unmount\r\n        window.removeEventListener(\"keyup\", this.keyHandling);\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\r\nimport './conways.css'\r\n\r\nclass Cell {\r\n    constructor(i, j) {\r\n        this.i = i;\r\n        this.j = j;\r\n        this.alive = false;\r\n    }\r\n\r\n    GetNeighbours(board) {\r\n        const positions = [[0, 1], [1, 0], [1, 1], [0, -1], [-1, 0], [-1, -1], [1, -1], [-1, 1]];\r\n        let neighbours = 0\r\n        for (let position of positions) {\r\n            let x = this.i + position[0];\r\n            let y = this.j + position[1];\r\n            if (0 <= x && x < board.length && 0 <= y && y < board[0].length) {\r\n                //console.log(x, y)\r\n                if (board[x][y].alive) {\r\n                    neighbours++;\r\n                }\r\n            }\r\n        }\r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n}\r\n\r\nfunction Go(props) {\r\n    return <button onClick={() => props.onClick()}>Start</button>\r\n}\r\n\r\nfunction Stop(props) {\r\n    return <button onClick={() => props.onClick()}>Stop</button>\r\n}\r\n\r\nclass Conways extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.size = [40, 25];\r\n        const gameBoard = this.newBoard();\r\n        this.state = {\r\n            gameBoard: gameBoard,\r\n            tickTime: 1000,\r\n            x: 0,\r\n            y: 0,\r\n        }\r\n    }\r\n\r\n    gameTick() {\r\n        this.updateBoard();\r\n    }\r\n\r\n    begin() {\r\n        window.fnInterval = setInterval(() => { this.gameTick(); }, this.state.tickTime);\r\n    }\r\n\r\n    end() {\r\n        window.fnInterval = clearInterval(window.fnInterval)\r\n    }\r\n\r\n    changeState(i, j) {\r\n        let board = this.state.gameBoard;\r\n\r\n        board[i][j].alive = !board[i][j].alive\r\n\r\n        this.setState({\r\n            gameBoard: board,\r\n        })\r\n\r\n    }\r\n\r\n    updateBoard() {\r\n\r\n        let board = this.state.gameBoard;\r\n        let change;\r\n        for (let row of board) {\r\n            for (let indiv of row) {\r\n                indiv.GetNeighbours(board)\r\n                if (indiv.neighbours === 3 && !indiv.alive) {\r\n                    indiv.future = true;\r\n                    change = true;\r\n                } else if (indiv.alive && (indiv.neighbours === 2 || indiv.neighbours === 3)) {\r\n                    indiv.future = true;\r\n                } else {\r\n                    if (indiv.alive) {\r\n                        change = true;\r\n                    }\r\n                    indiv.future = false;\r\n                }\r\n            }\r\n        }\r\n        for (let row of board) {\r\n            for (let indiv of row) {\r\n                indiv.alive = indiv.future;\r\n            }\r\n        }\r\n\r\n        if (!change) {\r\n            this.end()\r\n        }\r\n                \r\n        this.setState({\r\n            gameBoard: board,\r\n        });\r\n    }\r\n\r\n    newBoard() {\r\n        let board = [];\r\n        for (let i = 0; i < this.size[0]; i++) {\r\n            let row = []\r\n            for (let j = 0; j < this.size[1]; j++) {\r\n                row.push(new Cell(i, j))\r\n            }\r\n            board.push(row);\r\n        }\r\n        return board\r\n    }\r\n\r\n    renderBoard() {\r\n        let renderBoard = [];\r\n        for (let i = 0; i < this.size[0]; i++) {\r\n            let row = [];\r\n            for (let j = 0; j < this.size[1]; j++) {\r\n                let color = this.state.gameBoard[i][j].alive ? '#fff' : '#000'\r\n                row.push(<button style={{backgroundColor: color}} className=\"game-board-section\" onClick={() => this.changeState(i, j)} />);\r\n            }\r\n            renderBoard.push(<div className=\"game-board-row\">{row}</div>)\r\n        }\r\n\r\n        return renderBoard;\r\n    }\r\n\r\n    render() {\r\n        var renderedBoard = this.renderBoard()\r\n        return (\r\n            <div className=\"gameBoard\">\r\n                {renderedBoard}\r\n                <Go onClick={() => this.begin()} />\r\n                <Stop onClick={() => this.end()} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Conways;","import React from 'react';\r\nimport './maze_solver.css';\r\n\r\nfunction heuristic(a, b) {\r\n    let x = a[0] - b[0]\r\n    let y = a[1] - b[1]\r\n    return Math.pow(x * x + y * y, 0.5)\r\n}\r\n\r\nfunction removeFromArr(arr, item) {\r\n    for (let i = arr.length-1; i>=0;i--) {\r\n        if (arr[i] === item) {\r\n            arr.splice(i, 1);\r\n        }\r\n    }\r\n}\r\n\r\nfunction Square(props) {\r\n\r\n    let color;\r\n    switch (props.value[0]) {\r\n    case 'Draw':\r\n        color = '#000';\r\n        break;\r\n    case 'Path':\r\n        color = 'blue';\r\n        break;\r\n    case 'Start':\r\n        color = 'green';\r\n        break;\r\n    case 'openSet':\r\n        color = 'green';\r\n        break;\r\n    case 'End':\r\n        color = 'red';\r\n        break;\r\n    case 'closedSet':\r\n        color = 'red';\r\n        break;\r\n    default:\r\n        color = '#fff';\r\n        break;\r\n    }\r\n\r\n    return (\r\n        <button className=\"maze-solver-section\"\r\n        style={{\r\n            backgroundColor: color,\r\n        }}\r\n        onClick={() => props.onClick()} />\r\n    )\r\n}\r\n\r\nclass Cell {\r\n    constructor(i, j, w) {\r\n        this.i = i;\r\n        this.j = j;\r\n        this.type = null;\r\n        this.previous = undefined;\r\n        this.f = 0;\r\n        this.g = 0;\r\n        this.h = 0;\r\n    }\r\n\r\n\r\n    GetNeighbours(grid) {\r\n        const positions = [[0, 1], [1, 0], [1, 1], [0, -1], [-1, 0], [-1, -1], [1, -1], [-1, 1]];\r\n        let neighbours = [];\r\n        for (let position of positions) {\r\n            let x = this.i + position[0];\r\n            let y = this.j + position[1];\r\n            if (0 <= x && x < grid.length && 0 <= y && y < grid.length) {\r\n                neighbours.push(grid[x][y])\r\n            }\r\n        }\r\n        this.neighbours = neighbours;\r\n    }\r\n\r\n}\r\n\r\n\r\nclass MazeSolver extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        const boardLength = 50\r\n        this.tool = 'Draw'\r\n        this.end = undefined;\r\n        this.state = {\r\n            maze: this.reset(boardLength),\r\n            openSet: [],\r\n            closedSet: [],\r\n        }\r\n    }\r\n\r\n    gameTick() {\r\n        if (this.end) {\r\n            this.astar()\r\n        } else {\r\n            this.astarSetUp()\r\n        }\r\n    }\r\n\r\n    astarSetUp() {\r\n\r\n        let openSet = [];\r\n\r\n        for (let row of this.state.maze) {\r\n            for (let cell of row) {\r\n                cell.GetNeighbours(this.state.maze)\r\n                if (cell.type === 'Start') {\r\n                    openSet.push(cell)\r\n                } else if (cell.type === 'End') {\r\n                    this.end = cell\r\n                }\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            openSet: openSet,\r\n        })\r\n\r\n    }\r\n\r\n    astar() {\r\n\r\n        let maze = this.state.maze.slice()\r\n\r\n        let openSet = this.state.openSet.slice();\r\n        let closedSet = this.state.closedSet.slice();\r\n        const end = this.end\r\n        let path = []\r\n\r\n        if (openSet.length > 0) {\r\n            \r\n\r\n            let winner = 0;\r\n            for (let i = 0; i < openSet.length; i++) {\r\n                if (openSet[i].f < openSet[winner].f) {\r\n                    winner = i;\r\n                }\r\n            }\r\n\r\n            let current = openSet[winner];\r\n\r\n            if (current === end) {\r\n                let cell = current;\r\n                path = [cell];\r\n                while (cell.previous) {\r\n                    path.push(cell)\r\n                    cell = cell.previous\r\n                }\r\n                window.fnInterval = clearInterval(window.fnInterval);\r\n            }\r\n\r\n            removeFromArr(openSet, current)\r\n            closedSet.push(current)\r\n\r\n            for (let neighbour of current.neighbours) {\r\n                if (closedSet.includes(neighbour) || neighbour.type === 'Draw') {\r\n                    continue\r\n                }\r\n\r\n                let tentative_g = current.g + 1;\r\n                if (openSet.includes(neighbour)) {\r\n                    if (tentative_g < neighbour.g){\r\n                        neighbour.g = tentative_g\r\n                    }\r\n                } else {\r\n                    neighbour.g = tentative_g\r\n                    openSet.push(neighbour)\r\n                }\r\n\r\n                const a = [neighbour.i, neighbour.j];\r\n                const b = [end.i, end.j];\r\n\r\n                neighbour.h = heuristic(a, b);\r\n\r\n                neighbour.f = neighbour.g + neighbour.h\r\n\r\n                neighbour.previous = current\r\n            }\r\n\r\n        } else {\r\n            window.fnInterval = clearInterval(window.fnInterval);\r\n            console.log(\"No solution\")\r\n        }\r\n\r\n\r\n        let openSetType = path.length > 0 ? null : 'openSet'\r\n        let closedSetType = path.length > 0 ? null : 'closedSet'\r\n        for (let row of maze) {\r\n            for (let item of row) {\r\n                if (path.includes(item)) {\r\n                    item.type = 'Path';\r\n                } else if (openSet.includes(item)) {\r\n                    item.type = openSetType;\r\n                } else if (closedSet.includes(item)) {\r\n                    item.type = closedSetType;\r\n                }\r\n            }\r\n        }\r\n        this.setState({\r\n            maze: maze,\r\n            openSet: openSet,\r\n            closedSet: closedSet,\r\n        })\r\n        \r\n    }\r\n\r\n    removeAll(maze, tool) {\r\n        for (let row of maze) {\r\n            for (let cell of row) {\r\n                if (cell.type === tool) {\r\n                    cell.type = null;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    draw(i, j) {\r\n\r\n        let maze = this.state.maze.slice();\r\n\r\n        switch (this.tool) {\r\n        case 'Start':\r\n            this.removeAll(maze,'Start');\r\n            break;\r\n        case 'End':\r\n            this.removeAll(maze, 'End');\r\n            break;\r\n        default:\r\n            break;\r\n        }\r\n\r\n        maze[i][j].type = this.tool\r\n\r\n        this.setState({\r\n            maze: maze,\r\n        });\r\n\r\n    }\r\n\r\n    reset(length) {\r\n\r\n        let maze = [];\r\n\r\n        for (let i = 0; i < length; i++) {\r\n            let row = [];\r\n\r\n            for (let j=0; j < length; j++) {\r\n                row.push(new Cell(i, j));\r\n            }\r\n\r\n            maze.push(row);\r\n        }\r\n\r\n        this.setState({\r\n            maze: maze,\r\n            openSet: [],\r\n            closedSet: [],\r\n        });\r\n        this.end = undefined;\r\n\r\n        return maze;\r\n    }\r\n\r\n    renderGrid() {\r\n\r\n        let grid = [];\r\n\r\n        let row = [];\r\n        const options = ['Draw', 'Remove', 'Start', 'End']\r\n        for (let option of options) {\r\n            row.push(<button onClick={() => this.tool = option} className=\"option\">{option}</button>)\r\n        }\r\n        grid.push(<div className=\"solver-board-row\">{row}</div>)\r\n\r\n        for (let i = 0; i < this.state.maze.length; i++) {\r\n            let row = []\r\n            for (let j = 0; j < this.state.maze.length; j++) {\r\n                row.push(<Square value={[this.state.maze[i][j].type, this.state.openSet, this.state.closedSet]} onClick={() => this.draw(i, j)}/>)\r\n            }\r\n            grid.push(<div className=\"solver-board-row\">{row}</div>)\r\n        }\r\n        return grid\r\n    }\r\n\r\n    render() {\r\n\r\n        let grid = this.renderGrid();\r\n\r\n        return (\r\n            <div className=\"board\">\r\n                {grid}\r\n                <button onClick={() => window.fnInterval = setInterval(() => { this.gameTick(); }, 50)}>Start</button>\r\n                <button onClick={() => this.reset(this.state.maze.length)}>Reset</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MazeSolver;","import React from 'react';\r\nimport './chess.css';\r\n\r\nconst maximumDepth = 4;\r\nlet playing = true;\r\n\r\n\r\nfunction miniAlphaBeta(board, depth, alpha, beta) {\r\n    if (depth === 0) {\r\n        board.scoreBoard();\r\n        return board.score;\r\n    }\r\n\r\n    let boards = board.generateBoards(board.whitePieces);\r\n    let boardIndexWinner = 0;\r\n    let lowestScore = Infinity;\r\n    for (let i = 0; i < boards.length; i++) {\r\n\r\n        let score = maxAlphaBeta(boards[i], depth - 1, alpha, beta);\r\n\r\n        if (score < lowestScore) {\r\n            boardIndexWinner = i;\r\n            lowestScore = score;\r\n        } else if (depth === maximumDepth) {\r\n            if (score === lowestScore && Math.random() > 0.66) {\r\n                boardIndexWinner = i;\r\n                lowestScore = score;\r\n            }\r\n        }\r\n\r\n        if (score < alpha) {\r\n            return lowestScore;\r\n        } else if (score < beta) {\r\n            beta = score;\r\n        }\r\n    }\r\n\r\n    if (depth === maximumDepth) {\r\n        return boards[boardIndexWinner]\r\n    }\r\n\r\n    return lowestScore;\r\n}\r\n\r\nfunction maxAlphaBeta(board, depth, alpha, beta) {\r\n    if (depth === 0) {\r\n        board.scoreBoard();\r\n        return board.score;\r\n    }\r\n\r\n    let boards = board.generateBoards(board.blackPieces);\r\n    let boardIndexWinner = 0;\r\n    let highestScore = -Infinity;\r\n    for (let i = 0; i < boards.length; i++) {\r\n\r\n        let score = miniAlphaBeta(boards[i], depth - 1, alpha, beta);\r\n\r\n        if (score > highestScore) {\r\n            boardIndexWinner = i;\r\n            highestScore = score;\r\n        } else if (depth === maximumDepth) {\r\n            if (score === highestScore && Math.random() > 0.66) {\r\n                boardIndexWinner = i;\r\n                highestScore = score;\r\n            }\r\n        }\r\n\r\n        if (score > beta) {\r\n            return highestScore;\r\n        } else if (score > alpha) {\r\n            alpha = score;\r\n        }\r\n    }\r\n\r\n    if (depth === maximumDepth) {\r\n        return boards[boardIndexWinner]\r\n    }\r\n\r\n    return highestScore;\r\n}\r\n\r\nclass Piece {\r\n    constructor(x, y, isWhite, label) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.isWhite = isWhite;\r\n        this.label = label;\r\n        this.taken = false;\r\n        const color = isWhite ? 'l' : 'd'\r\n        this.piecePic = \"Chess_\" + this.label.slice(-1).toLowerCase() + color + \"t60.png\";\r\n    }\r\n\r\n    hasLandedOnTeam(board, x, y) {\r\n        var landedOn = board.getPieceAt(x, y);\r\n        if (landedOn) {\r\n            if (landedOn.isWhite === this.isWhite) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    //Sometimes diagonals (definitly bottom-left to top-right) break it\r\n\r\n    movesThroughPieces(board, x, y) {\r\n        let step_x = x - this.x;\r\n        let step_y = y - this.y;\r\n\r\n        if (Math.abs(step_y) <= 1 && Math.abs(step_x) <= 1) {\r\n            return false;\r\n        }\r\n\r\n        if (step_x > 0) {\r\n            step_x = 1;\r\n        } else if (step_x < 0) {\r\n            step_x = -1\r\n        }\r\n        \r\n        if (step_y > 0) {\r\n            step_y = 1;\r\n        } else if (step_y < 0) {\r\n            step_y = -1\r\n        }\r\n\r\n\r\n        let check_x = this.x + step_x;\r\n        let check_y = this.y + step_y;\r\n\r\n        while (check_x !== x || check_y !== y) {\r\n\r\n            var piece = board.getPieceAt(check_x, check_y);\r\n            if (piece) {\r\n                return true;\r\n            }\r\n\r\n            check_x += step_x;\r\n            check_y += step_y;\r\n        }\r\n\r\n        return false;\r\n\r\n    }\r\n\r\n    BoardGen(board) {\r\n        var boards = [];\r\n        var moves = this.GetMoves(board);\r\n        for (let move of moves) {\r\n            let newBoard = board.duplicate();\r\n            newBoard.move([this.x, this.y], move)\r\n            boards.push(newBoard)\r\n        }\r\n        return boards\r\n    }\r\n\r\n    validXY(x, y) {\r\n        const valid_x = 0 <= x && x < 8;\r\n        const valid_y = 0 <= y && y < 8;\r\n        return valid_x && valid_y;\r\n    }\r\n}\r\n\r\nclass King extends Piece {\r\n    constructor(x, y, isWhite) {\r\n        super(x, y, isWhite, 'K');\r\n        this.positioning = [\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-30,-40,-40,-50,-50,-40,-40,-30],\r\n            [-20,-30,-30,-40,-40,-30,-30,-20],\r\n            [-10,-20,-20,-20,-20,-20,-20,-10],\r\n            [20, 20,  0,  0,  0,  0, 20, 20],\r\n            [20, 30, 10,  0,  0, 10, 30, 20]\r\n        ]\r\n        if (!this.isWhite) {\r\n            this.positioning = this.positioning.reverse()\r\n        }\r\n    }\r\n\r\n    moveIsPossible(board, x, y) {\r\n        const landedOnTeam = this.hasLandedOnTeam(board, x, y);\r\n        if (landedOnTeam) {\r\n            return false;\r\n        }\r\n        if (Math.abs(this.x - x) <= 1 && Math.abs(this.y - y) <= 1) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    GetMoves(board) {\r\n        const moves = [[0, 1], [1, 0], [1, 1], [-1, 0], [0, -1], [-1, 1], [1, -1], [-1, -1]];\r\n        let possibleMoves = [];\r\n        for (let move of moves) {\r\n            let new_x = this.x + move[0];\r\n            let new_y = this.y + move[1];\r\n            if (this.validXY(new_x, new_y)) {\r\n                if (!this.hasLandedOnTeam(board, new_x, new_y)) {\r\n                    possibleMoves.push([new_x, new_y])\r\n                }\r\n            }\r\n        }\r\n        return possibleMoves;\r\n    }\r\n\r\n    duplicate() {\r\n        var clone = new King(this.x, this.y, this.isWhite);\r\n        clone.taken = this.taken;\r\n        return clone;\r\n    }\r\n}\r\n\r\nclass Queen extends Piece {\r\n    constructor(x, y, isWhite) {\r\n        super(x, y, isWhite, 'Q');\r\n        this.positioning = [\r\n            [-20,-10,-10, -5, -5,-10,-10,-20],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-10,  0,  5,  5,  5,  5,  0,-10],\r\n            [-5,  0,  5,  5,  5,  5,  0, -5],\r\n            [0,  0,  5,  5,  5,  5,  0, -5],\r\n            [-10,  5,  5,  5,  5,  5,  0,-10],\r\n            [-10,  0,  5,  0,  0,  0,  0,-10],\r\n            [-20,-10,-10, -5, -5,-10,-10,-20]\r\n        ]\r\n        if (!this.isWhite) {\r\n            this.positioning = this.positioning.reverse()\r\n        }\r\n    }\r\n\r\n    moveIsPossible(board, x, y) {\r\n        const landedOnTeam = this.hasLandedOnTeam(board, x, y);\r\n        if (landedOnTeam) {\r\n            return false;\r\n        }\r\n\r\n        const bishop = Math.abs(this.x - x) === Math.abs(this.y - y)\r\n        const rook = this.x === x || this.y === y\r\n        if (bishop || rook) {\r\n            if (!this.movesThroughPieces(board, x, y)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    GetMoves(board) {\r\n        let possibleMoves = [];\r\n\r\n        for (let x = 0; x < 8; x++) {\r\n            if (!this.hasLandedOnTeam(board, x, this.y) && !this.movesThroughPieces(board, x, this.y)) {\r\n                possibleMoves.push([x, this.y])\r\n            }\r\n        }\r\n\r\n        for (let y = 0; y < 8; y++) {\r\n            if (!this.hasLandedOnTeam(board, this.x, y) && !this.movesThroughPieces(board, this.x, y)) {\r\n                possibleMoves.push([this.x, y])\r\n            }\r\n        }\r\n\r\n        const directions = [[1, 1], [1, -1], [-1, 1], [-1, -1]];\r\n\r\n        for (let direction of directions) {\r\n\r\n            let check_x = this.x + direction[0];\r\n            let check_y = this.y + direction[1];\r\n\r\n            while (this.validXY(check_x, check_y) && !this.movesThroughPieces(board, check_x, check_y) && !this.hasLandedOnTeam(board, check_x, check_y)) {\r\n                possibleMoves.push([check_x, check_y]);\r\n                check_x += direction[0]\r\n                check_y += direction[1]\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    duplicate() {\r\n        var clone = new Queen(this.x, this.y, this.isWhite);\r\n        clone.taken = this.taken;\r\n        return clone;\r\n    }\r\n}\r\n\r\nclass Knight extends Piece {\r\n    constructor(x, y, isWhite) {\r\n        super(x, y, isWhite, 'Kn');\r\n        this.positioning = [\r\n            [-50,-40,-30,-30,-30,-30,-40,-50],\r\n            [-40,-20,  0,  0,  0,  0,-20,-40],\r\n            [-30,  0, 10, 15, 15, 10,  0,-30],\r\n            [-30,  5, 15, 20, 20, 15,  5,-30],\r\n            [-30,  0, 15, 20, 20, 15,  0,-30],\r\n            [-30,  5, 10, 15, 15, 10,  5,-30],\r\n            [-40,-20,  0,  5,  5,  0,-20,-40],\r\n            [-50,-40,-30,-30,-30,-30,-40,-50]\r\n        ]\r\n        if (!this.isWhite) {\r\n            this.positioning = this.positioning.reverse()\r\n        }\r\n    }\r\n\r\n    moveIsPossible(board, x, y) {\r\n        const landedOnTeam = this.hasLandedOnTeam(board, x, y);\r\n        if (landedOnTeam) {\r\n            return false;\r\n        }\r\n\r\n        const opt1 = Math.abs(this.x - x) === 1 && Math.abs(this.y - y) === 2\r\n        const opt2 = Math.abs(this.x - x) === 2 && Math.abs(this.y - y) === 1\r\n        if (opt1 || opt2) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    GetMoves(board) {\r\n        const moves = [[2, 1], [1, 2], [-2, 1], [1, -2], [-1, 2], [2, -1], [-2, -1], [-1, -2]];\r\n        let possibleMoves = [];\r\n        for (let move of moves) {\r\n            let new_x = this.x + move[0];\r\n            let new_y = this.y + move[1];\r\n            if (this.validXY(new_x, new_y)) {\r\n                if (!this.hasLandedOnTeam(board, new_x, new_y)) {\r\n                    possibleMoves.push([new_x, new_y])\r\n                }\r\n            }\r\n        }\r\n        return possibleMoves;\r\n    } \r\n\r\n    duplicate() {\r\n        var clone = new Knight(this.x, this.y, this.isWhite);\r\n        clone.taken = this.taken;\r\n        return clone;\r\n    }\r\n}\r\n\r\nclass Rook extends Piece {\r\n    constructor(x, y, isWhite) {\r\n        super(x, y, isWhite, 'R');\r\n        this.positioning = [\r\n            [0,  0,  0,  0,  0,  0,  0,  0],\r\n            [5, 10, 10, 10, 10, 10, 10,  5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [-5,  0,  0,  0,  0,  0,  0, -5],\r\n            [0,  0,  0,  5,  5,  0,  0,  0]\r\n        ]\r\n        if (!this.isWhite) {\r\n            this.positioning = this.positioning.reverse()\r\n        }\r\n    }\r\n\r\n    moveIsPossible(board, x, y) {\r\n        const landedOnTeam = this.hasLandedOnTeam(board, x, y);\r\n        if (landedOnTeam) {\r\n            return false;\r\n        }\r\n\r\n        if (this.x === x || this.y === y) {\r\n            if (!this.movesThroughPieces(board, x, y)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    GetMoves(board) {\r\n        \r\n        let possibleMoves = [];\r\n\r\n        for (let x = 0; x < 8; x++) {\r\n            if (!this.hasLandedOnTeam(board, x, this.y)) {\r\n                if (!this.movesThroughPieces(board, x, this.y)) {\r\n                    possibleMoves.push([x, this.y])\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let y = 0; y < 8; y++) {\r\n            if (!this.hasLandedOnTeam(board, this.x, y)) {\r\n                if (!this.movesThroughPieces(board, this.x, y)) {\r\n                    possibleMoves.push([this.x, y])\r\n                }\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    duplicate() {\r\n        var clone = new Rook(this.x, this.y, this.isWhite);\r\n        clone.taken = this.taken;\r\n        return clone;\r\n    }\r\n}\r\n\r\nclass Bishop extends Piece {\r\n    constructor(x, y, isWhite) {\r\n        super(x, y, isWhite, 'B');\r\n        this.positioning = [\r\n            [-20,-10,-10,-10,-10,-10,-10,-20],\r\n            [-10,  0,  0,  0,  0,  0,  0,-10],\r\n            [-10,  0,  5, 10, 10,  5,  0,-10],\r\n            [-10,  5,  5, 10, 10,  5,  5,-10],\r\n            [-10,  0, 10, 10, 10, 10,  0,-10],\r\n            [-10, 10, 10, 10, 10, 10, 10,-10],\r\n            [-10,  5,  0,  0,  0,  0,  5,-10],\r\n            [-20,-10,-10,-10,-10,-10,-10,-20]\r\n        ]\r\n        if (!this.isWhite) {\r\n            this.positioning = this.positioning.reverse()\r\n        }\r\n    }\r\n\r\n    moveIsPossible(board, x, y) {\r\n        const landedOnTeam = this.hasLandedOnTeam(board, x, y);\r\n        if (landedOnTeam) {\r\n            return false;\r\n        }\r\n\r\n        if (Math.abs(this.x - x) === Math.abs(this.y - y)) {\r\n            if (!this.movesThroughPieces(board, x, y)) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    GetMoves(board) {\r\n        const directions = [[1, 1], [1, -1], [-1, 1], [-1, -1]];\r\n        let possibleMoves = [];\r\n\r\n        for (let direction of directions) {\r\n\r\n            let check_x = this.x + direction[0];\r\n            let check_y = this.y + direction[1];\r\n\r\n            while (this.validXY(check_x, check_y) && !this.movesThroughPieces(board, check_x, check_y) && !this.hasLandedOnTeam(board, check_x, check_y)) {\r\n                possibleMoves.push([check_x, check_y]);\r\n                check_x += direction[0]\r\n                check_y += direction[1]\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    duplicate() {\r\n        var clone = new Bishop(this.x, this.y, this.isWhite);\r\n        clone.taken = this.taken;\r\n        return clone;\r\n    }\r\n}\r\n\r\nclass Pawn extends Piece { //Start A Petition to change how pawns move\r\n    constructor(x, y, isWhite) {\r\n        super(x, y, isWhite, 'P');\r\n        this.unmoved = true;\r\n        this.positioning = [\r\n            [ 0,  0,  0,  0,  0,  0,  0,  0],\r\n            [50, 50, 50, 50, 50, 50, 50, 50],\r\n            [10, 10, 20, 30, 30, 20, 10, 10],\r\n            [5,  5, 10, 25, 25, 10,  5,  5],\r\n            [0,  0,  0, 20, 20,  0,  0,  0],\r\n            [5, -5,-10,  0,  0,-10, -5,  5],\r\n            [5, 10, 10,-20,-20, 10, 10,  5],\r\n            [0,  0,  0,  0,  0,  0,  0,  0]\r\n        ]\r\n        if (!this.isWhite) {\r\n            this.positioning = this.positioning.reverse()\r\n        }\r\n    }\r\n\r\n    moveIsPossible(board, x, y) {\r\n        const landedOnTeam = this.hasLandedOnTeam(board, x, y);\r\n        if (landedOnTeam) {\r\n            return false;\r\n        }\r\n\r\n        if (this.unmoved) {\r\n            if (this.x - x === 0 && Math.abs(this.y - y) === 2) {\r\n                if (!this.movesThroughPieces(board, x, y)) {\r\n                    this.unmoved = false;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        const attack = board.getPieceAt(x, y);\r\n\r\n        if (attack) {\r\n            if (Math.abs(this.x - x) === 1 && Math.abs(this.y - y) === 1) {\r\n                this.unmoved = false;\r\n                return true;\r\n            }\r\n        } else {\r\n            if (this.x - x === 0 && Math.abs(this.y - y) === 1) {\r\n                this.unmoved = false;\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    GetMoves(board) {\r\n        let possibleMoves = [];\r\n        const y = this.isWhite ? -1 : 1;\r\n\r\n        let check_x;\r\n        let check_y = this.y + y;\r\n\r\n        for (let move of [-1, 1]) {\r\n            check_x = this.x + move;\r\n            if (this.validXY(check_x, check_y)) {\r\n                if (board.getPieceAt(check_x, check_y) && !this.hasLandedOnTeam(board, check_x, check_y)) {\r\n                    possibleMoves.push([check_x, check_y])\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.validXY(this.x, check_y)) {\r\n            if (!board.getPieceAt(this.x, check_y)) {\r\n                possibleMoves.push([this.x, check_y])\r\n            }\r\n        }\r\n\r\n        check_y = this.y + (y * 2)\r\n        if (this.validXY(this.x, check_y) && this.unmoved) {\r\n            if (!board.getPieceAt(this.x, check_y) && !this.movesThroughPieces(board, this.x, check_y)) {\r\n                possibleMoves.push([this.x, check_y]);\r\n            }\r\n        }\r\n\r\n        return possibleMoves\r\n    }\r\n\r\n    duplicate() {\r\n        var clone = new Pawn(this.x, this.y, this.isWhite);\r\n        clone.taken = this.taken;\r\n        clone.unmoved = this.unmoved;\r\n        return clone;\r\n    }\r\n}\r\n\r\nclass Board {\r\n    constructor() {\r\n        this.whitePieces = [];\r\n        this.blackPieces = [];\r\n        this.score = 0;\r\n    }\r\n\r\n    scoreBoard() {\r\n        const scorer = {'K': 20000, 'Q':900, 'B': 330, 'Kn':320, 'R': 500, 'P':100}\r\n\r\n        let white = 0;\r\n        for (let piece of this.whitePieces) {\r\n            if (!piece.taken) {\r\n                white += scorer[piece.label];\r\n                white += piece.positioning[piece.x][piece.y];\r\n            }\r\n        }\r\n\r\n        let black = 0\r\n        for (let piece of this.blackPieces) {\r\n            if (!piece.taken) {\r\n                black += scorer[piece.label];\r\n                black += piece.positioning[piece.x][piece.y];\r\n            }\r\n        }\r\n\r\n        this.score = black - white ;\r\n    }\r\n\r\n    getPieceAt(x, y) {\r\n        const pieces = this.whitePieces.concat(this.blackPieces)\r\n        for (let piece of pieces) {\r\n            if (piece.x === x && piece.y === y && !piece.taken) {\r\n                return piece;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    move(a, b) {\r\n        var piece = this.getPieceAt(a[0], a[1]);\r\n        var landingOn = this.getPieceAt(b[0], b[1])\r\n        if (landingOn) {\r\n            landingOn.taken = true;\r\n        }\r\n        piece.x = b[0];\r\n        piece.y = b[1];\r\n    }\r\n\r\n    generateBoards(colorPieces) {\r\n        let boards = [];\r\n        for (let piece of colorPieces) {\r\n            if (!piece.taken) {\r\n                var piecesNewBoards = piece.BoardGen(this);\r\n                boards = boards.concat(piecesNewBoards)\r\n            }\r\n        }\r\n        return boards\r\n    }\r\n\r\n    checkmate() {\r\n        for (let pieces of [this.whitePieces, this.blackPieces]) {\r\n            let gameOver = true\r\n            for (let piece of pieces) {\r\n                if (piece.label === 'K' && !piece.taken) {\r\n                    gameOver = false;\r\n                }\r\n            }\r\n            if (gameOver) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    duplicate() {\r\n        let clone = new Board();\r\n        for (let i = 0; i < this.whitePieces.length; i++) {\r\n          clone.whitePieces.push(this.whitePieces[i].duplicate());\r\n        }\r\n        for (let i = 0; i < this.blackPieces.length; i++) {\r\n          clone.blackPieces.push(this.blackPieces[i].duplicate());\r\n        }\r\n        return clone;\r\n      }\r\n\r\n    setUp() {\r\n        this.whitePieces.push(new King(4, 7, true));\r\n        this.whitePieces.push(new Queen(3, 7, true));\r\n        this.whitePieces.push(new Bishop(2, 7, true));\r\n        this.whitePieces.push(new Bishop(5, 7, true));\r\n        this.whitePieces.push(new Knight(1, 7, true));\r\n        this.whitePieces.push(new Rook(0, 7, true));\r\n        this.whitePieces.push(new Knight(6, 7, true));\r\n        this.whitePieces.push(new Rook(7, 7, true));\r\n    \r\n        this.whitePieces.push(new Pawn(4, 6, true));\r\n        this.whitePieces.push(new Pawn(3, 6, true));\r\n        this.whitePieces.push(new Pawn(2, 6, true));\r\n        this.whitePieces.push(new Pawn(5, 6, true));\r\n        this.whitePieces.push(new Pawn(1, 6, true));\r\n        this.whitePieces.push(new Pawn(0, 6, true));\r\n        this.whitePieces.push(new Pawn(6, 6, true));\r\n        this.whitePieces.push(new Pawn(7, 6, true));\r\n    \r\n        this.blackPieces.push(new King(4, 0, false));\r\n        this.blackPieces.push(new Queen(3, 0, false));\r\n        this.blackPieces.push(new Bishop(2, 0, false));\r\n        this.blackPieces.push(new Bishop(5, 0, false));\r\n        this.blackPieces.push(new Knight(1, 0, false));\r\n        this.blackPieces.push(new Rook(0, 0, false));\r\n        this.blackPieces.push(new Knight(6, 0, false));\r\n        this.blackPieces.push(new Rook(7, 0, false));\r\n    \r\n        this.blackPieces.push(new Pawn(4, 1, false));\r\n        this.blackPieces.push(new Pawn(3, 1, false));\r\n        this.blackPieces.push(new Pawn(2, 1, false));\r\n        this.blackPieces.push(new Pawn(5, 1, false));\r\n        this.blackPieces.push(new Pawn(1, 1, false));\r\n        this.blackPieces.push(new Pawn(0, 1, false));\r\n        this.blackPieces.push(new Pawn(6, 1, false));\r\n        this.blackPieces.push(new Pawn(7, 1, false));\r\n    }\r\n\r\n}\r\n\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.tool = null;\r\n        this.state = {\r\n            board: new Board()\r\n        }\r\n        this.state.board.setUp()\r\n        this.ai = this.ai.bind(this);\r\n    }\r\n\r\n    user(piece, x, y) {\r\n\r\n        if (playing) {\r\n            if (this.tool) {\r\n                if (this.tool.moveIsPossible(this.state.board, x, y)) {\r\n                    var taken = this.state.board.getPieceAt(x, y);\r\n                    if (taken) {\r\n                        taken.taken = true;\r\n                    }\r\n                    this.tool.x = x;\r\n                    this.tool.y = y;\r\n                    this.tool = null;\r\n                    window.fnInterval = setInterval(this.ai, 300);\r\n                    this.forceUpdate()\r\n                }\r\n            }\r\n\r\n            if (piece) {\r\n                if (piece.isWhite) {\r\n                    this.tool = piece;\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    ai() {\r\n        this.setState({\r\n            board: maxAlphaBeta(this.state.board, maximumDepth, -Infinity, Infinity)\r\n        })\r\n        playing = this.state.board.checkmate()\r\n        clearInterval(window.fnInterval);\r\n    }\r\n\r\n    renderBoard() {\r\n        let grid = [];\r\n        \r\n        for (let x = 0; x < 8; x++) {\r\n            let row = [];\r\n            for (let y = 0; y < 8; y++) {\r\n                let piece = this.state.board.getPieceAt(x, y);\r\n                if (piece) {\r\n                    row.push(<button className=\"chessSquare\"><img src={\"/pieces/\"+piece.piecePic} alt={piece.label + piece.piecePic.slice(7, 8)} onClick={() => this.user(piece, x, y)}/></button>)\r\n                } else {\r\n                    row.push(<button className=\"chessSquare\" onClick={() => this.user(null, x, y)} />)\r\n                }\r\n            }\r\n            grid.push(<div className=\"chessRow\">{row}</div>)\r\n        }\r\n        return grid\r\n    }\r\n\r\n    render() {\r\n        const grid = this.renderBoard();\r\n        return (\r\n            <div className=\"game\">\r\n            {grid}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {\n\tBrowserRouter as Router,\n\tSwitch,\n\tRoute,\n  } from \"react-router-dom\";\n\nimport PasswordChecker from './password_checker.js';\nimport Board from './noughts_and_crosses.js';\nimport Sudoku from './sudoku.js';\nimport MazeGen from './maze_generator.js';\nimport Snake from './snake.js';\nimport Conways from './conways.js';\nimport MazeSolver from './maze_solver.js';\nimport Chess from './chess.js';\n\n\nconst url = \"https://ogreenwood672.github.io/website/\"\n\nfunction NavButton(props) {\n\treturn (\n\t\t<button className=\"navbutton\" onClick={() => {props.onClick()}}>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n}\n\nclass Navbar extends React.Component {\n\n\thandleClick(message) {\n\t\twindow.location.href = url + message.toLowerCase();\n\t}\n\n\trenderButton(message) {\n\t\treturn\t<NavButton \n\t\t\t\tvalue={message} \n\t\t\t\tonClick={() => this.handleClick(message)}\n\t\t\t\t/>\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"navbar\">\n\t\t\t\t<div className=\"leftNavbar\">\n\t\t\t\t\t{this.renderButton(\"HOME\")}\n\t\t\t\t\t{this.renderButton(\"About\")}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass ProjectNav extends React.Component {\n\n\n\trender() {\n\t\tconst origin = url + 'projects'\n\t\treturn (\n\t\t\t<div className=\"rightProjects\">\n\t\t\t\t<div className=\"dropdown\">\n\t\t\t\t\t<button className=\"navbutton\">Algorithms</button>\n\t\t\t\t\t<div className=\"dropdown-content\">\n\t\t\t\t\t\t<a href={origin+\"/chess\"}>Chess</a>\n\t\t\t\t\t\t<a href={origin+\"/sudoku\"}>Sudoku</a>\n\t\t\t\t\t\t<a href={origin+\"/noughts_and_crosses\"}>Noughts and Crosses</a>\n\t\t\t\t\t\t<a href={origin+\"/maze_generator\"}>Maze Generator</a>\n\t\t\t\t\t\t<a href={origin+\"/maze_solver\"}>Maze Solver</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dropdown\">\n\t\t\t\t\t<button className=\"navbutton\">Games</button>\n\t\t\t\t\t<div className=\"dropdown-content\">\n\t\t\t\t\t\t<a href={origin+\"/snake\"}>Snake</a>\n\t\t\t\t\t\t<a href={origin+\"/conways_game_of_life\"}>Conway's Game of Life</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"dropdown\">\n\t\t\t\t\t<button className=\"navbutton\">Text Based</button>\n\t\t\t\t\t<div className=\"dropdown-content\">\n\t\t\t\t\t\t<a href={origin+\"/password_checker\"}>Password Checker</a>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\n\t\t//<a href={origin+\"/agar.io\"}>Agar.io</a>\n\t}\n}\n\n\nclass About extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"mainBox center\">\n\t\t\t\t<h1>&lt;Insert inspirational quote here&gt;</h1>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Home extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"mainBox center\">\n\t\t\t\t<h1>Hello</h1>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nclass Website extends React.Component {\n  \trender() {\n\n    \treturn (\n\t\t\t<Router>\n\t\t\t\t<div className=\"background\">\n\t\t\t\t\t<Navbar />\n\t\t\t\t\t<ProjectNav />\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/projects/password_checker\">\n\t\t\t\t\t\t\t<PasswordChecker />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/projects/noughts_and_crosses\">\n\t\t\t\t\t\t\t<Board />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/projects/sudoku\">\n\t\t\t\t\t\t\t<Sudoku />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/projects/maze_generator\">\n\t\t\t\t\t\t\t<MazeGen />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/projects/snake\">\n\t\t\t\t\t\t\t<Snake />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/projects/conways_game_of_life\">\n\t\t\t\t\t\t\t<Conways />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/projects/maze_solver\">\n\t\t\t\t\t\t\t<MazeSolver />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/projects/chess\">\n\t\t\t\t\t\t\t<Chess />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/about\">\n\t\t\t\t\t\t\t<About />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/\">\n\t\t\t\t\t\t\t<Home />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</div>\n\t\t\t</Router>\n    \t)\n  \t}\n}\n\n\nReactDOM.render(\n\t<Website/>,\n  \tdocument.getElementById('root')\n);\n\n"],"sourceRoot":""}